Создание веб-приложения для регистрации и авторизации на php (не framework), html, css, js/jquery.
    * можно использовать пакетный менеджер (composer) и php шаблонизаторы (twig, blade), но без самих фреймворков.

Форма регистрации:

    Поля:
        login (unique)    [валидация : минимум 6 символов ]
        password          [валидация : минимум 6 символов , обязательно должны состоять из цифр и букв]
        confirm_password
        email (unique)    [валидация : email]
        name              [валидация : 2 символа , только буквы]
    Функционал:
        после заполнения формы, уходит запрос на создание пользователя;
        поля проверяются на валидность, уникальные поля проверяются на уникальность в БД, password и confirm_password
        сравниваются (должны быть одинаковыми);
        если что-то не так - выдается ошибка. Возвращаем текст с ошибками. Подставляем их рядом с полями, в которых
        допущена ошибка.
        в случае успеха шифруем пароль ("соль"+md5 или "соль"+sha1) и заносим данные в нашу базу.

Форма авторизации:

    Поля:
        login
        password
    Функционал:
        После заполнения формы уходит запрос:
        проверяется наличие пользователя в бд;
        сверяется пароль.

В случае ошибки, возвращаем текст с ошибками. Подставляем их рядом с полями, в которых допущена ошибка.
В случае успеха происходит процесс авторизации (создание необходимых связей cookies + session ).

В случае если пользователь авторизован, на всём сайте мы должны видеть сообщение 'Hello [имя пользователя]' и
кнопку "Выйти", формы в таком случае не отображаем.
Внешний вид значения не имеет.


Основные требования:

    Приложение обязательно должно быть написано используя ООП концепцию.
    * Должны быть выделены отдельные сущности, функционалы и для них описаны классы.

    Вместо базы данных используем файл JSON. Другие БД/технологии не интересны.

    Файл базы не должен быть доступен по прямому урл

    Доступ к файлу базы должен осуществлятся только на стороне php.
    * имеется ввиду, что при выполнении предыдущего пункта, к файлу нельзя будет обращаться, например, через ajax запрос.

    Для работы с БД должен быть описан класс реализующий CRUD
    * CRUD - это акроним, описывающий функционал Create / Read / Update / Delete. Т.е. в этом пункте, мы просим создать
    инструмент на ООП для работы с нашей базой.

    Пароль не должен хранится в открытом виде.

    Связь авторизации  - cookies + session
    * когда происходит авторизация, мы должны запомнить нашего пользователя, чтобы при переходе на следующие страницы,
    мы смогли его идентифицировать и показать, что он авторизован.

    Формы должны отправляться используя технологию ajax, ответ в формате json.

    Файлы обработки ajax-запросов не должны быть доступны из браузера, если это не ajax-запрос.
    * Простая проверка, если к нам пришёл не ajax-запрос, то работу не выполняем.

    Если js отключен, то форма отправиться не может.

    Все поля форм - обязательные.

    Все формы реализуются через <form>.

    Результаты залить на github/bitbucket. Сделать репозиторий публичным. Ссылку прислать по почте.


Дополнительные требования:

    ** Эти требования не обязательны для исполнения, но будут большим плюсом при выполнении.

    защита от инъекций при получении параметров через get- или post;

    осмысленное название полей в бд;

    использование PSR;

    соблюдение принципов SOLID;

    разумное оформление кода – имена переменных, методов, классов, отступы, комментарии;

    код должен быть прост в поддержке;

    отсутствие дублирование кода. Копипаст – признак низкой культуры разработки;

    разделение логики работы и представления – некрасиво писать html и php вперемешку;

    css/js в отдельных файлах;

    осмысленное использование css.


Данное задание будет проверятся на сервере linux с php 7.4 , разрабатывая на windows не забывайте про написание слэшей
в правильную сторону! =)
И различия в использовании верхнего и нижнего регистра наименования файлов.


Какие тесты должно пройти задание:

    Общие проверки
        Проверить обязательность полей.
        Проверить реализацию форм.
        Проверить приложение на соответствие концепции ООП.
        Проверить использование файла JSON вместо БД.
        Проверить отсутствие доступа к файлу БД по прямому URL.
        Проверить хранение пароля в зашифрованном виде.
        Проверить переход по страницам сайта без повторной авторизации (cookies+session).
        Проверить отправку формы с использованием AJAX.
        Проверить соответствие ответа формату JSON .
        Проверить невозможность отправки формы с отключенным JS.


Форма регистрации

    Общие проверки:
        Проверить обязательность полей.
        Проверить наличие текста ошибки при вводе невалидных данных.

    Поле login:
        Оставить поле незаполненным и попытаться отправить форму.
        Проверить валидность длины логина.
        Проверить ввод логина с пробелами между/в начале /в конце символов.
        Проверить отправку формы только из пробелов.
        Проверить отправку формы  уже зарегистрированного логина в БД.

    Поле password:
        Оставить поле незаполненным и попытаться отправить форму.
        Проверить шифрование пароля при вводе (********).
        Проверить валидность длины пароля.
        Проверить ввод валидного пароля.
        Проверить ввод пароля с пробелом между/ в начале / в конце / символов.
        Проверить ввод валидного пароля + спец.символы.
        Проверить отправку формы только из пробелов в поле.

    Поле confirm_password:
        Проверить ввод пароля отличного от пароля в поле password.
        Проверить ввод пароля совпадающего с паролем в поле password.

    Поле email:
        Оставить поле незаполненным и попытаться отправить форму.
        Проверить ввод адреса с двойным символом @.
        Проверить ввод адреса с пробелами между/в начале /в конце символов.
        Проверить ввод адреса без доменной части.
        Проверить ввод адреса без точки в доменной части.
        Проверить ввод адреса уже зарегистрированного в БД.

    Поле name:
        Оставить поле незаполненным и попытаться отправить форму.
        Проверить валидность длины имени.
        Проверить границы длины имени.
        Проверить ввод имени с пробелами между/в начале /в конце букв.
        Проверить ввод имени только из пробелов .


    Форма авторизации

    Общие проверки:
        Проверить шифрование пароля при заполнении поля password (*******).
        Проверить наличие текста ошибки при вводе невалидных данных.
        Проверить наличие сообщения “Hello [имя пользователя]” на каждой странице сайта при успешной авторизации.
        Проверить создание cookies + session при успешной авторизации.

    Поле login:
        Проверить ввод валидного логина и невалидного password.
        Проверить ввод валидного логина.
        Проверить ввод логина незарегистрированного в БД.
        Оставить поле пустым и отправить форму.

    Поле password:
        Проверить ввод валидного пароля для зарегистрированного пользователя.
        Проверить ввод невалидного пароля для зарегистрированного пользователя.
